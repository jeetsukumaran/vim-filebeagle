*filebeagle.txt*	For Vim version 7.3	Last change: 2014 May 31

===============================================================================
                                             *filebeagle* *filebeagle-contents*
CONTENTS~

    1. Invocation Commands ................... |filebeagle-invocation-commands|
    2. Invocation Key Mappings ............... |filebeagle-invocation-key-maps|
    3. Directory Buffer Key Mappings ......... |filebeagle-buffer-key-maps|
       3.1 Directory Listing and View ........ |filebeagle-listing-view|
       3.2 Opening Files and Directories ..... |filebeagle-opening-files|
       3.3 Reading/Inserting Files ........... |filebeagle-inserting-files|
       3.4 Setting the Vim Directories ....... |filebeagle-set-vim-directory|
    4. Directory Buffer Commands ............. |filebeagle-buffer-commands|
    5. Options and Settings .................. |filebeagle-options|
    6. Custom Autocommands ................... |filebeagle-autocommands|

===============================================================================
                                               *filebeagle-invocation-commands*
INVOCATION COMMANDS~

:FileBeagleBufferDir                                     *:FileBeagleBufferDir*
    Open the FileBeagle directory buffer on the directory of the current
    buffer.

:FileBeagle [{path}]                                              *:FileBeagle*
    Open the FileBeagle directory buffer on {path} or current working directory
    if {path} is not given.

===============================================================================
                                               *filebeagle-invocation-key-maps*
INVOCATION KEY MAPPINGS~

These are key mappings to invoke FileBeagle from a normal Vim Buffer. By
default (unless |g:filebeagle_suppress_keymaps| is defined to be 1), the
following key maps are provided:

-           Invokes ":FileBeagleBufferDir": open the directory buffer
            on the directory of the current buffer.

<leader>f   Invokes ":FileBeagle" with no arguments: open the directory buffer
            on the current working directory.

If you want to define your own key mappings, then add something like the
following to your '~/.vimrc':
>
    let g:filebeagle_suppress_keymaps = 1
    map <silent> <Leader>f  <Plug>FileBeagleOpenCurrentWorkingDir
    map <silent> -          <Plug>FileBeagleOpenCurrentBufferDir
>
The above replicate the default key mappings. You should, of course,
substitute '<Leader>f' and '-' for whatever you prefer.

===============================================================================
                                                   *filebeagle-buffer-key-maps*
FILEBEAGLE BUFFER KEY MAPPINGS~

These are key mappings available from within the FileBeagle directory buffer.
They provide ways to open files or directories, or change the current focal
directory (i.e., the directory being viewed).

-------------------------------------------------------------------------------
                                                       *filebeagle-listing-view*
Directory Listing and View~

R               Refresh the directory listing.
f               Define and apply a regular expression filter for the file
                entries.
F               Toggle application of the regular expression filter.
gh              Toggle showing of hidden/(wild-)ignored files.
-               Move up to the parent directory of the current focal
                directory.
<BS>            Go back to the previous directory in the directory history.
q               Quit and delete the FileBeagle buffer.
~               Goto home directory

-------------------------------------------------------------------------------
                                                     *filebeagle-opening-files*
Opening Files and Directories~

    +---------------------------+------------+------------+
    | Action*                   | Foreground | Background |
    +---------------------------+------------+------------+
    | Open in Current Window    | o          | po         |
    | Open in Horizontal Split  | s          | ps         |
    | Open in Vertical Split    | v          | pv         |
    | Open in Tab Page          | t          | pt         |
    +---------------------------+------------+------------+
    * If multiple files are selected in visual mode, the
      action will be carried out on all visually-selected
      files. The action can also take an optional {count},
      which specifies that the action will be carried out on
      the file listed at line {count} of the FileBeagle
      buffer, regardless of where the cursor is.

(NOTE: THE KEY MAPPINGS IN THE DIRECTORY BUFFER HAVE CHANGED RADICALLY
FROM THE PREVIOUS VERSION. IF YOU PREFER THE OLD SCHEME THEN SEE
|filebeagle_buffer_legacy_key_maps|.)

The basic set of key maps allow for the the opening of the file or directory
under the cursor, either in the current window or split, or a new horizontal
split, vertical split, or tab page.

If there is a visual selection active, then instead of the file currently
under the cursor, all selected files will be targeted for the action invoked
by the key mapping. For example, if there are four files highlighted in a
visual selection, then '`v`' will result in four vertical splits being
created, with each one of the selected files being opened in its own split.

Alternatively, all key maps to open files or directory can take an optional
{count}, which specifies the file or directory to open in terms of the line
number in which it is listed. So, for example, while '`v`' will open the file
or directory currently listed at the current cursor line in a new vertical
split, '`42v`' will open the file or directory at line 42 in a new vertical
split, regardless of where the cursor is.

All actions can be carried out with FileBeagle in a "pinned mode" by
initiating the key sequence with '`p`'. With FileBeagle in "pinned mode", the
action is carried out in the background: i.e., the files are opened with the
FileBeagle buffer remaining open and in focus. So, for example, '`pv`' will
open the file under the cursor in a new vertical split, while keeping the
FileBeagle buffer open and in focus. This can also be used with multiple files
visually-selected to open all of them in the background in new vertical
splits, or a {count} to open a file/directory at a specific line.

<CR>
o               Open the file or directory under the cursor in the current
                window. Multiple files can be opened simultaneously by
                selecting them in visual mode.
{count}<CR>
{count}o        Open the file or directory at line {count} in the current
                window.
p<CR>
po              Open the file or directory under the cursor in the current
                window in the background. Multiple files can be opened
                simultaneously by selecting them in visual mode.
{count}p<CR>
{count}po       Open the file or directory at line {count} in the current
                window in the background.


v               Open the currently selected file or directory in a new
                vertical split. Multiple files can be opened simultaneously by
                selecting them in visual mode.
{count}v        Open the file or directory at line {count} in a new
pv              Open the file or directory under the cursor in a new vertical
                split in the background. Multiple files can be opened
                simultaneously by selecting them in visual mode.
{count}pv       Open the file or directory at line {count} in a new
                vertical split in the background.
                vertical split.


s               Open the currently selected file or directory in a new
                horizontal split. Multiple files can be opened simultaneously
                by selecting them in visual mode.
{count}s        Open the file or directory at line {count} in a new horizontal
                split.
ps              Open the file or directory under the cursor in a new
                horizontal split in the background. Multiple files can be
                opened simultaneously by selecting them in visual mode.
{count}ps       Open the file or directory at line {count} in a new horizontal
                split in the background.


t               Open the currently selected file in a new tab. Multiple files
                can be opened simultaneously by selecting them in visual mode.
{count}t        Open the file or directory at line {count} in a new tab.
pt              Open the file or directory under the cursor in a new tab in
                the background. Multiple files can be opened simultaneously
                by selecting them in visual mode.
{count}pt       Open the file or directory at line {count} in a new tab in
                the background.

-------------------------------------------------------------------------------
                                                   *filebeagle-inserting-files*
Reading/Inserting Files~

    +---------------------------+------------+------------+
    | Action*                   | Foreground | Background |
    +---------------------------+------------+------------+
    | Read/Insert Below Current | r.         | pr.        |
    | Read/Insert at Beginning  | r0         | pr0        |
    | Read/Insert at End        | r$         | pr$        |
    +---------------------------+------------+------------+
    * If multiple files are selected in visual mode, the
      action will be carried out on all visually-selected
      files. The action can also take an optional {count},
      which specifies that the action will be carried out on
      the file listed at line {count} of the FileBeagle
      buffer, regardless of where the cursor is.

At the moment, only files can be read/inserted into the current (original)
buffer. As above, the basic key maps ('`r.`', '`r0`', '`r$`', for insertion
below current cursor line, at beginning of file, or end of file, respectively)
can be modified by {count} to target a file at a specific line {count} in the
FileBeagle buffer or prefixed by '`p`' to be carried out in "pinned" mode or
the background. In addition, again as above, if a visual selection is active,
the action will be carried out on all visually-selected files.


r.              Close FileBeagle and insert contents of the current or
                selected file(s) into original buffer at line below the
                current cursor position in the original buffer.
{count}r.       Close FileBeagle and insert contents of the file at line
                {count} into original buffer at line below the current cursor
                position in the original buffer.
pr.             Keep FileBeagle open and in focus, and insert contents of the
                current or selected file(s) into original buffer at line below
                the current cursor position in the original buffer.
{count}pr.      Keep FileBeagle open and in focus, and insert contents of the
                file at line {count} into original buffer at line below the
                current cursor position in the original buffer.

r0              Close FileBeagle and insert contents of the current or
                selected file(s) into original buffer at the beginning of the
                buffer.
{count}r0       Close FileBeagle and insert contents of the file at line
                {count} into original buffer at the beginning of the buffer.
pr0             Keep FileBeagle open and in focus, and insert contents of the
                current or selected file(s) into original buffer the beginning.
{count}pr0      Keep FileBeagle open and in focus, and insert contents of the
                file at line {count} into original buffer at the beginning of
                the buffer.

r$              Close FileBeagle and insert contents of the current or
                selected file(s) into original buffer at the end of the buffer.
{count}r$       Close FileBeagle and insert contents of the file at line
                {count} into original buffer at the end of the buffer.
pr$             Keep FileBeagle open and in focus, and insert contents of the
                current or selected file(s) into original buffer at the end of
                the buffer.
{count}pr$      Keep FileBeagle open and in focus, and insert contents of the
                file at line {count} into original buffer at the end of the
                buffer.

-------------------------------------------------------------------------------
                                                      *filebeagle-adding-files*
File Creation/Addition Operations~

+               Add (create) a new file to FileBeagle's current focal
                directory.
%               Open a new empty buffer in FileBeagle's current focal
                directory.

-------------------------------------------------------------------------------
                                                 *filebeagle-set-vim-directory*
Setting the Vim Directories~

cd              Change Vim working directory to FileBeagle's current focal
                directory.
cl              Change Vim local directory to FileBeagle's current focal
                directory.

===============================================================================
                                                   *filebeagle-buffer-commands*
FILEBEAGLE BUFFER COMMANDS~

The following commands are available from within the directory listing buffer:

:ClipPathname
   Copy the full path of the currently selected file or directory to the system
   clipboard (i.e., the "+" register).

:ClipDirname
   Copy the full path of the current focal directory (i.e., the directory
   currently listed) to the system clipboard (i.e., the "+" register).

===============================================================================
                                                           *filebeagle-options*
OPTIONS AND SETTINGS~

The list of file patterns to ignore can be controlled by setting
|wildignore|.

Other options are:

g:filebeagle_suppress_keymaps~                  *g:filebeagle_suppress_keymaps*
    Default: 0
    If specified as 1, then key-mappings to invoke FileBeagle will not be defined.

g:filebeagle_buffer_legacy_key_maps~      *g:filebeagle_buffer_legacy_key_maps*
    Default: 0
    If specified as 1, then the key-mapping scheme from release 1.0.0 will be
    used in the FileBeagle buffer instead of the new ones.

g:filebeagle_hijack_netrw~                          *g:filebeagle_hijack_netrw*
    Default: 1
    If specified as 0, directories will be opened by |netrw| instead of
    FileBeagle.

g:filebeagle_show_hidden~                            *g:filebeagle_show_hidden*
    Default: 0
    Show hidden and (wild-)ignored files by default (can be toggled when
    viewing a directory using 'gh').

g:filebeagle_show_parent                            *g:filebeagle_show_parent*
    Default: 1
    If specified as 1, show entry to navigate to parent directory (../).

g:filebeagle_show_line_numbers~                *g:filebeagle_show_line_numbers*
    Default: -1
    If 0, then line numbers (see |nu|) will be suppressed in the directory
    buffer (i.e, 'set nonumber' will be invoked). If 1, then line numbers will
    be explicitly activated (i.e, 'set number' will be invoked). If -1
    (default), then no number options will be explicitly set or unset.

g:filebeagle_show_line_relativenumbers~ *g:filebeagle_show_line_relativenumbers*
    Default: -1
    If 0, then relative line numbers (see |rnu|) will be suppressed in the
    directory buffer (i.e, 'set rnu' will be invoked). If 1, then relative
    line numbers will be explicitly activated (i.e, 'set nornu' will be
    invoked). If -1 (default), then no relative number options will be
    explicitly set or unset.

g:filebeagle_check_gitignore~                    *g:filebeagle_check_gitignore*
    Default: 0
    If 1, filebeagle will attempt to exclude gitignored files. Requires
    external git binary on system path.

g:filebeagle_statusline~                              *g:filebeagle_statusline*
    Default: %( %{FileBeagleStatusLineCurrentDirInfo()} %)%=%(
    %{FileBeagleStatusLineFilterAndHiddenInfo()} %)
    Defines a statusbar used by filebeagle. See |statusline| for more
    information.

===============================================================================
                                                        *filebeagle-autocommands*
CUSTOM AUTOCOMMANDS~

FileBeagle exposes the following autocommand events, to allow you to hook in
custom functionality:

                                                               *FileBeagleBufNew*
FileBeagleBufNew        Immediately after creation of the FileBeagle
                        directory buffer, and before any buffer-local
                        options, key mappings, commands, etc. have been
                        defined. The directory viewer object is available
                        as the buffer variable
                        `b:filebeagle_directory_viewer`.

                                                              *FileBeagleReadPre*
FileBeagleReadPre       After creation and full setup (options, key
                        mappings, commands, etc.) of the FileBeagle
                        buffer, but before any directory information has
                        been read.


                                                              *FileBeagleReadPost*
FileBeagleReadPost      After creation, full setup (options, key mappings,
                        commands, etc.) of the FileBeagle buffer, and
                        after the directory information has been read,
                        parsed, and rendered.

FileBeagleRefreshPre    Immediately before updating the content of the
                        directory buffer.

FileBeagleRefreshPost   Immediately after updating the content of the
                        directory buffer.

vim:tw=78:ts=8:ft=help:norl:
